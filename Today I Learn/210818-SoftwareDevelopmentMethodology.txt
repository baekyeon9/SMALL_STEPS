2021-08-18

소프트웨어 개발 방법론 (Software Development Methodology) 1

 [ 방법론 (Methodology ]

   - 어떤 사항에 대해 이론이나 경험적  사실을 정리하고 표준화 하는 것
   - 이론/ 경험적 사실 → 정리 → 표준화 (작업항목, 순서, 산출물, 참여자…)
  

 [ 소프트웨어 개발 방법론 ]

   - 소프트웨어(결과물)을 생산하는데 필요한 프로그래밍 개발과정을 정리
   - 개발 과정의 표준화(개인이나 조직에 상관 없이 일관성 있는 개발을 유지하고 협업을 잘 수행할 수 있게 돕는 것)
   - 종류
     1) 폭포수 모델 : 분석 - 설계 - 구현 - 테스트
     2) 프로토타이핑 모델
     3) 반복적, 점진적 개발
     4) 애자일 방법론 (세부적으로 더 쪼개기) : Extream / Scrum


 [ 요구 사항 식별 방법론 ]

   - 액터(Actor) 식별
   - 액터? 시스템을 사용하는 사람 / 프로세스(소프트웨어)/ 장치(하드웨어)
   - 구분
     1) 주액터 (Primary Actor) : 시스템을 사용하는 액터
     2) 보조액터 (Secondary Actor) : 시스템이 사용하는 다른 시스템

   ※ 시스템을 사용하는 사람 / 소프트웨어 / 장비 모두 Actor이다! (사람만 Actor인 것이 아님!)


 [ use-case 유스케이스 식별 ]

   - use-case란? : 액터가 시스템을 통해 달성하려는 업무 목표
   - 유스케이스명 : 업무 명으로 이름을 짓는다.
     1) 한글 예) 구매, 주문
     2) 영어 예) Order, Add, Board


 [ use-case 식별 가이드 ]

   1. 한 사람이 한 순간에 수행하는 업무인가?
    - 예) 책 구매하기 : 주문, 결제, 배송 ( 너무 크다. 더 작은 단위로 쪼개야 한다)
   2. use-case의  시작과 끝이 명확한가? 그래서 카운트 할 수 있는가?
    - 예) 게시글 관리 : 게시글 관리의 시작과 끝을 명시할 수 없다. → 카운트 불가. ( 더 작은 규모로 쪼개야 한다.)
   3. 시스템을 통해 처리하는 업무인가?
    - 예 1) 팩스보내기 : 오프라인 업무는 유스케이스가 아니다!
    - 예 2) 로그인 : 시스템을 통해서 처리하는 업무는 맞지만, '로그인' 자체는 업무가 아니다!

   ※ 개발 관리가 쉬운 단위로 요구 사항을 쪼갤 수 있다면,
       use-case 단위로 개발을 관리한다.
       - 너무 큰 요구사항 : 관리가 어렵다.
       - 너무 작은 요구사항 : 관리가 번거롭다.
    

 [ use-case 유스케이스 병합 ]

   - 합치는 것이 더 관리하기 쉬울 때, 여러 use-case를 한 개의 use-case로 합치기.
     1) CRUD (Create, Read, Update, Delete) use-case의 경우
        예)  게시글 등록
              게시글 조회            ==>   게시글 관리 (xxxManage, xxxHandle, xxxService)
              게시글 변경
              게시글 삭제 
     2) 서로 밀접하게  관련된 업무인 경우
        예)  도서 주문
              도서 결제               ==>   도서 구매  

   ※ 주의할 점 : 병합한 use-cas가 적절한 개발 기간 내에 구현할 수 있는 규모여야 한다.
   ※ 병합했더니 개발 관리가 더 힘들다?  → 병합하지 않는 것이 낫다.


 [ use-case 유스케이스 분리 ]

   - 여러 use-case에서 공통으로  수행하는 작업인 경우에 분리한다. → 개발 관리가 용이해 진다.
   ※ 단, 분리를 통해 식별한 use-case는 '업무'가 아닌 경우도 있다. (예, 로그인)
